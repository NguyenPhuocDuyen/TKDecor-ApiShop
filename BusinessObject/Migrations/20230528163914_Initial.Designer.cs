// <auto-generated />
using System;
using BusinessObject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObject.Migrations
{
    [DbContext(typeof(TkdecorContext))]
    [Migration("20230528163914_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObject.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("article_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete");

                    b.Property<bool?>("IsPublish")
                        .HasColumnType("bit")
                        .HasColumnName("is_publish");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("thumbnail");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ArticleId")
                        .HasName("PK__Article__CC36F660180F7E7F");

                    b.HasIndex("UserId");

                    b.ToTable("Article", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cart_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("CartId")
                        .HasName("PK__Cart__2EF52A27823B5610");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("update_at");

                    b.HasKey("CategoryId")
                        .HasName("PK__Category__D54EE9B430138B56");

                    b.HasIndex(new[] { "Name" }, "UQ__Category__72E12F1BE7D29FE9")
                        .IsUnique();

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Coupon", b =>
                {
                    b.Property<int>("CouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("coupon_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CouponId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("code");

                    b.Property<int>("CouponTypeId")
                        .HasColumnType("int")
                        .HasColumnName("coupon_type_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int>("RemainingUsageCount")
                        .HasColumnType("int")
                        .HasColumnName("remaining_usage_count");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(8, 0)")
                        .HasColumnName("value");

                    b.HasKey("CouponId")
                        .HasName("PK__Coupon__58CF6389A836CD8D");

                    b.HasIndex("CouponTypeId");

                    b.HasIndex(new[] { "Code" }, "UQ__Coupon__357D4CF9C0A7C258")
                        .IsUnique();

                    b.ToTable("Coupon", (string)null);
                });

            modelBuilder.Entity("BusinessObject.CouponType", b =>
                {
                    b.Property<int>("CouponTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("coupon_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CouponTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.HasKey("CouponTypeId")
                        .HasName("PK__CouponTy__AD2AFC0A104B34A3");

                    b.HasIndex(new[] { "Name" }, "UQ__CouponTy__72E12F1BE5D8D49E")
                        .IsUnique();

                    b.ToTable("CouponType", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("message_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("is_read");

                    b.Property<string>("Message1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int")
                        .HasColumnName("receiver_id");

                    b.Property<int>("SenderId")
                        .HasColumnType("int")
                        .HasColumnName("sender_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("MessageId")
                        .HasName("PK__Message__0BBF6EE6112EA443");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notification_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__E059842F2D0624C3");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<int?>("CouponId")
                        .HasColumnType("int")
                        .HasColumnName("coupon_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int")
                        .HasColumnName("order_status_id");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("total_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("OrderId")
                        .HasName("PK__Order__465962292D23A46C");

                    b.HasIndex("CouponId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("BusinessObject.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_detail_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<decimal>("PaymentPrice")
                        .HasColumnType("decimal(10, 0)")
                        .HasColumnName("payment_price");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("OrderDetailId")
                        .HasName("PK__OrderDet__3C5A4080BBA82BF6");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("BusinessObject.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_status_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderStatusId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.HasKey("OrderStatusId")
                        .HasName("PK__OrderSta__A499CF231D746F37");

                    b.HasIndex(new[] { "Name" }, "UQ__OrderSta__72E12F1B9EE1EE34")
                        .IsUnique();

                    b.ToTable("OrderStatus", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 0)")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("Slug")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("slug");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("Url3dModel")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("url_3D_model");

                    b.HasKey("ProductId")
                        .HasName("PK__Product__47027DF5960BA9EF");

                    b.HasIndex("CategoryId");

                    b.HasIndex(new[] { "Slug" }, "UQ__Product__72E12F1B1235289A")
                        .IsUnique()
                        .HasFilter("[slug] IS NOT NULL");

                    b.HasIndex(new[] { "Name" }, "UQ__Product__72E12F1B7465289F")
                        .IsUnique();

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("BusinessObject.ProductImage", b =>
                {
                    b.Property<int>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("productImage_id");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image_url");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.HasKey("ProductImageId")
                        .HasName("PK__ProductI__7A342910809D9053");

                    b.ToTable("ProductImage", (string)null);
                });

            modelBuilder.Entity("BusinessObject.ProductInteraction", b =>
                {
                    b.Property<int>("ProductInteractionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_interaction_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductInteractionId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("ProductInteractionStatusId")
                        .HasColumnType("int")
                        .HasColumnName("product_interaction_status_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ProductInteractionId")
                        .HasName("PK__ProductI__A2F12EDBBAC0359E");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductInteractionStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductInteraction", (string)null);
                });

            modelBuilder.Entity("BusinessObject.ProductInteractionStatus", b =>
                {
                    b.Property<int>("ProductInteractionStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_interaction_status_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductInteractionStatusId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.HasKey("ProductInteractionStatusId")
                        .HasName("PK__ProductI__0CC0092882FD7968");

                    b.HasIndex(new[] { "Name" }, "UQ__ProductI__72E12F1BB1BB6955")
                        .IsUnique();

                    b.ToTable("ProductInteractionStatus", (string)null);
                });

            modelBuilder.Entity("BusinessObject.ProductReport", b =>
                {
                    b.Property<int>("ProductReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_report_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductReportId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("ProductReportedId")
                        .HasColumnType("int")
                        .HasColumnName("product_reported_id");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reason");

                    b.Property<int>("ReportStatusId")
                        .HasColumnType("int")
                        .HasColumnName("report_status_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserReportId")
                        .HasColumnType("int")
                        .HasColumnName("user_report_id");

                    b.HasKey("ProductReportId")
                        .HasName("PK__ProductR__DC0B4A22C1B82B5E");

                    b.HasIndex("ProductReportedId");

                    b.HasIndex("ReportStatusId");

                    b.HasIndex("UserReportId");

                    b.ToTable("ProductReport", (string)null);
                });

            modelBuilder.Entity("BusinessObject.ProductReview", b =>
                {
                    b.Property<int>("ProductReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_review_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductReviewId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Rate")
                        .HasColumnType("int")
                        .HasColumnName("rate");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ProductReviewId")
                        .HasName("PK__ProductR__8440EB03DB89B961");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductReview", (string)null);
                });

            modelBuilder.Entity("BusinessObject.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("BusinessObject.ReportProductReview", b =>
                {
                    b.Property<int>("ReportProductReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("report_product_review_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportProductReviewId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("ProductReviewReportedId")
                        .HasColumnType("int")
                        .HasColumnName("product_review_reported_id");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reason");

                    b.Property<int>("ReportStatusId")
                        .HasColumnType("int")
                        .HasColumnName("report_status_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserReportId")
                        .HasColumnType("int")
                        .HasColumnName("user_report_id");

                    b.HasKey("ReportProductReviewId")
                        .HasName("PK__ReportPr__09EE80B34DFBA358");

                    b.HasIndex("ProductReviewReportedId");

                    b.HasIndex("ReportStatusId");

                    b.HasIndex("UserReportId");

                    b.ToTable("ReportProductReview", (string)null);
                });

            modelBuilder.Entity("BusinessObject.ReportStatus", b =>
                {
                    b.Property<int>("ReportStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("report_status_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportStatusId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.HasKey("ReportStatusId")
                        .HasName("PK__ReportSt__09E0D88687C41A16");

                    b.HasIndex(new[] { "Name" }, "UQ__ReportSt__72E12F1B690C91E7")
                        .IsUnique();

                    b.ToTable("ReportStatus", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__760965CC5F8795DF");

                    b.HasIndex(new[] { "Name" }, "UQ__Role__72E12F1B88C9766C")
                        .IsUnique();

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("BusinessObject.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("avatar_url");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("EmailConfirmationCode")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email_confirmation_code");

                    b.Property<DateTime?>("EmailConfirmationSentAt")
                        .HasColumnType("datetime")
                        .HasColumnName("email_confirmation_sent_at");

                    b.Property<bool?>("EmailConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("is_delete");

                    b.Property<bool?>("IsSubscriber")
                        .HasColumnType("bit")
                        .HasColumnName("is_subscriber");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("ResetPasswordCode")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reset_password_code");

                    b.Property<bool?>("ResetPasswordRequired")
                        .HasColumnType("bit")
                        .HasColumnName("reset_password_required");

                    b.Property<DateTime?>("ResetPasswordSentAt")
                        .HasColumnType("datetime")
                        .HasColumnName("reset_password_sent_at");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("UserId")
                        .HasName("PK__User__B9BE370F0AD19949");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ__User__AB6E6164CB4E6B2A")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("BusinessObject.UserAddress", b =>
                {
                    b.Property<int>("UserAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_address_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserAddressId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit")
                        .HasColumnName("is_default");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("UserAddressId")
                        .HasName("PK__UserAddr__FEC0352E4E3DC7B4");

                    b.HasIndex("UserId");

                    b.ToTable("UserAddress", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Article", b =>
                {
                    b.HasOne("BusinessObject.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Article_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Cart", b =>
                {
                    b.HasOne("BusinessObject.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Cart_Product");

                    b.HasOne("BusinessObject.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Cart_User");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Coupon", b =>
                {
                    b.HasOne("BusinessObject.CouponType", "CouponType")
                        .WithMany("Coupons")
                        .HasForeignKey("CouponTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Coupon_CouponType");

                    b.Navigation("CouponType");
                });

            modelBuilder.Entity("BusinessObject.Message", b =>
                {
                    b.HasOne("BusinessObject.User", "Receiver")
                        .WithMany("MessageReceivers")
                        .HasForeignKey("ReceiverId")
                        .IsRequired()
                        .HasConstraintName("FK_Message_User1");

                    b.HasOne("BusinessObject.User", "Sender")
                        .WithMany("MessageSenders")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("FK_Message_User");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("BusinessObject.Notification", b =>
                {
                    b.HasOne("BusinessObject.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Notification_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Order", b =>
                {
                    b.HasOne("BusinessObject.Coupon", "Coupon")
                        .WithMany("Orders")
                        .HasForeignKey("CouponId")
                        .HasConstraintName("FK_Order_Coupon");

                    b.HasOne("BusinessObject.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_OrderStatus");

                    b.HasOne("BusinessObject.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_User");

                    b.Navigation("Coupon");

                    b.Navigation("OrderStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.OrderDetail", b =>
                {
                    b.HasOne("BusinessObject.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetail_Order");

                    b.HasOne("BusinessObject.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetail_Product");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BusinessObject.Product", b =>
                {
                    b.HasOne("BusinessObject.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_Category");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BusinessObject.ProductImage", b =>
                {
                    b.HasOne("BusinessObject.Product", "ProductImageNavigation")
                        .WithOne("ProductImage")
                        .HasForeignKey("BusinessObject.ProductImage", "ProductImageId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductImage_Product");

                    b.Navigation("ProductImageNavigation");
                });

            modelBuilder.Entity("BusinessObject.ProductInteraction", b =>
                {
                    b.HasOne("BusinessObject.Product", "Product")
                        .WithMany("ProductInteractions")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductInteraction_Product");

                    b.HasOne("BusinessObject.ProductInteractionStatus", "ProductInteractionStatus")
                        .WithMany("ProductInteractions")
                        .HasForeignKey("ProductInteractionStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductInteraction_ProductInteractionStatus");

                    b.HasOne("BusinessObject.User", "User")
                        .WithMany("ProductInteractions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductInteraction_User");

                    b.Navigation("Product");

                    b.Navigation("ProductInteractionStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.ProductReport", b =>
                {
                    b.HasOne("BusinessObject.Product", "ProductReported")
                        .WithMany("ProductReports")
                        .HasForeignKey("ProductReportedId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductReport_Product");

                    b.HasOne("BusinessObject.ReportStatus", "ReportStatus")
                        .WithMany("ProductReports")
                        .HasForeignKey("ReportStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductReport_ReportStatus");

                    b.HasOne("BusinessObject.User", "UserReport")
                        .WithMany("ProductReports")
                        .HasForeignKey("UserReportId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductReport_User");

                    b.Navigation("ProductReported");

                    b.Navigation("ReportStatus");

                    b.Navigation("UserReport");
                });

            modelBuilder.Entity("BusinessObject.ProductReview", b =>
                {
                    b.HasOne("BusinessObject.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductReview_Product");

                    b.HasOne("BusinessObject.User", "User")
                        .WithMany("ProductReviews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductReview_User");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.RefreshToken", b =>
                {
                    b.HasOne("BusinessObject.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.ReportProductReview", b =>
                {
                    b.HasOne("BusinessObject.ProductReview", "ProductReviewReported")
                        .WithMany("ReportProductReviews")
                        .HasForeignKey("ProductReviewReportedId")
                        .IsRequired()
                        .HasConstraintName("FK_ReportProductReview_ProductReview");

                    b.HasOne("BusinessObject.ReportStatus", "ReportStatus")
                        .WithMany("ReportProductReviews")
                        .HasForeignKey("ReportStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_ReportProductReview_ReportStatus");

                    b.HasOne("BusinessObject.User", "UserReport")
                        .WithMany("ReportProductReviews")
                        .HasForeignKey("UserReportId")
                        .IsRequired()
                        .HasConstraintName("FK_ReportProductReview_User");

                    b.Navigation("ProductReviewReported");

                    b.Navigation("ReportStatus");

                    b.Navigation("UserReport");
                });

            modelBuilder.Entity("BusinessObject.User", b =>
                {
                    b.HasOne("BusinessObject.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BusinessObject.UserAddress", b =>
                {
                    b.HasOne("BusinessObject.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserAddress_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BusinessObject.Coupon", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BusinessObject.CouponType", b =>
                {
                    b.Navigation("Coupons");
                });

            modelBuilder.Entity("BusinessObject.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BusinessObject.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BusinessObject.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductImage");

                    b.Navigation("ProductInteractions");

                    b.Navigation("ProductReports");

                    b.Navigation("ProductReviews");
                });

            modelBuilder.Entity("BusinessObject.ProductInteractionStatus", b =>
                {
                    b.Navigation("ProductInteractions");
                });

            modelBuilder.Entity("BusinessObject.ProductReview", b =>
                {
                    b.Navigation("ReportProductReviews");
                });

            modelBuilder.Entity("BusinessObject.ReportStatus", b =>
                {
                    b.Navigation("ProductReports");

                    b.Navigation("ReportProductReviews");
                });

            modelBuilder.Entity("BusinessObject.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BusinessObject.User", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Carts");

                    b.Navigation("MessageReceivers");

                    b.Navigation("MessageSenders");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("ProductInteractions");

                    b.Navigation("ProductReports");

                    b.Navigation("ProductReviews");

                    b.Navigation("ReportProductReviews");

                    b.Navigation("UserAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
